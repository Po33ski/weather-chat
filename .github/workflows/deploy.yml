name: Deploy Weather Center Chat

on:
  push:
    branches: [ deploy ]


env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Build Docker image (Nginx + FastAPI)
      run: |
        docker build \
          --build-arg NEXT_PUBLIC_GOOGLE_CLIENT_ID='${{ secrets.NEXT_PUBLIC_GOOGLE_CLIENT_ID }}' \
          -t weather-center-chat:ci .

    - name: Run container
      run: |
        docker run -d --name app -p 8080:80 \
          -e VISUAL_CROSSING_API_KEY='${{ secrets.VISUAL_CROSSING_API_KEY }}' \
          -e GOOGLE_API_KEY='${{ secrets.GOOGLE_API_KEY }}' \
          -e NEXT_PUBLIC_GOOGLE_CLIENT_ID='${{ secrets.NEXT_PUBLIC_GOOGLE_CLIENT_ID }}' \
          -e MODEL='gemini-2.0-flash' \
          -e DISABLE_WEB_DRIVER='0' \
          -e ENVIRONMENT='production' \
          weather-center-chat:ci

    - name: Wait for health via Nginx
      run: |
        for i in {1..120}; do
          if curl -fsS http://localhost:8080/api/health >/dev/null; then echo "nginx+backend up"; exit 0; fi
          sleep 1
        done
        echo "service not ready"; docker logs app || true; exit 1

    - name: Set up Python (for client tests)
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv (official installer)
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Sync backend deps for requests
      run: |
        cd backend
        uv sync

    - name: Run test_local.py against Nginx
      run: |
        BACKEND_BASE_URL=http://localhost:8080 uv run --directory backend python ../test_local.py
      env:
        VISUAL_CROSSING_API_KEY: ${{ secrets.VISUAL_CROSSING_API_KEY }}
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}

    - name: Teardown container
      if: always()
      run: |
        docker logs app || true
        docker rm -f app || true


  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/deploy' 
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Render (Manual)
      run: |
        echo "Deployment to Render should be configured in Render dashboard"
        echo "Environment variables are available in GitHub Secrets:"
        echo ""
        echo "Backend variables:"
        echo "- VISUAL_CROSSING_API_KEY: ${{ secrets.VISUAL_CROSSING_API_KEY != '' }}"
        echo "- GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY != '' }}"
        echo ""
        echo "Frontend variables:"
        echo "- NEXT_PUBLIC_GOOGLE_CLIENT_ID: ${{ secrets.NEXT_PUBLIC_GOOGLE_CLIENT_ID != '' }}"
    
    - name: Notify deployment status
      run: |
        echo "âœ… Tests passed and deployment is ready"
        echo "ðŸ“‹ Next steps:"
        echo "1. Go to Render.com dashboard"
        echo "2. Create new Web Service from this repository"
        echo "3. Use Docker deployment with render.yaml"
        echo "4. Set environment variables:"
        echo "   Backend:"
        echo "   - VISUAL_CROSSING_API_KEY"
        echo "   - GOOGLE_API_KEY"
        echo "   Frontend:"
        echo "   - NEXT_PUBLIC_GOOGLE_CLIENT_ID"
        echo "5. Deploy!" 